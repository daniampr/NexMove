#  import pandas as pd
from pandasai import SmartDataframe
from pandasai.responses.response_parser import ResponseParser
from langchain_groq.chat_models import ChatGroq
from dotenv import load_dotenv
from utils.helpers import DATA_simple_chat
import os
import streamlit as st
load_dotenv()

RESULT = []


class OutputParser(ResponseParser):
    def __init__(self, context) -> None:
        super().__init__(context)

    def parse(self, result):
        if result['type'] == "dataframe":
            st.dataframe(result['value'])
            RESULT.append(result['value'])
        elif result['type'] == 'plot':
            st.image(result["value"])
        else:
            st.write(result['value'])
            RESULT.append(result['value'])
        return


def chat_completion(user_prompt: str):
    llm = ChatGroq(
        model_name="mixtral-8x7b-32768",
        api_key=os.getenv("GROQ_API_KEY"),
        temperature=0.0
    )
    
    df = SmartDataframe(
        DATA_simple_chat,
        config={"llm": llm, "response_parser": OutputParser},
        description="Dataframe containing mobility data in Spain.")

    pandasai_response = df.chat(user_prompt)
    
    code_executed = df.last_code_executed
    st.write(f"CODE GENERATED: ```{code_executed}``` \n CODE EXECUTED: {df.last_code_generated}\n RESULT: {RESULT}")
    messages = [
        ("system", "You are a text-based chatbot that helps users to interact with a dataframe containing mobility data in Spain. In your input, you will receive:  - 'user_prompt', a string that represents the user's request. - 'generated_code': a string that represents the code you had generated to execute the user's request. You will return a string that explains the output, that is a description that complements the result obtained by your code execution. The output will be displayed for people that does not understand the code generated, so try not to include technical programming terms in your explaination. If the code generated by the model performs some chart plot, will be displayed in the screen as well, for that, make a one-line description indicating that the plot is being displayed, but do NOT specify any information regarding the location of the plot because is displayed in the web-app that the user is seeing."),
        ("user", f"USER PROMPT: ```{user_prompt}```\nCODE GENERATED: ```{code_executed}```\n RESULT OBTAINED: ```{RESULT}```")
    ]

    llm_response = llm.invoke(messages)

    return llm_response, df.last_code_executed
